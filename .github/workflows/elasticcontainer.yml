# This workflow will build and push a new container image to Amazon ECR,
# and then will deploy a new task definition to Amazon ECS, when there is a push to the "main" branch.
#
# To use this workflow, you will need to complete the following set-up steps:
#
# 1. Create an ECR repository to store your images.
#    For example: `aws ecr create-repository --repository-name my-ecr-repo --region us-east-2`.
#    Replace the value of the `ECR_REPOSITORY` environment variable in the workflow below with your repository's name.
#    Replace the value of the `AWS_REGION` environment variable in the workflow below with your repository's region.
#
# 2. Create an ECS task definition, an ECS cluster, and an ECS service.
#    For example, follow the Getting Started guide on the ECS console:
#      https://us-east-2.console.aws.amazon.com/ecs/home?region=us-east-2#/firstRun
#    Replace the value of the `ECS_SERVICE` environment variable in the workflow below with the name you set for the Amazon ECS service.
#    Replace the value of the `ECS_CLUSTER` environment variable in the workflow below with the name you set for the cluster.
#
# 3. Store your ECS task definition as a JSON file in your repository.
#    The format should follow the output of `aws ecs register-task-definition --generate-cli-skeleton`.
#    Replace the value of the `ECS_TASK_DEFINITION` environment variable in the workflow below with the path to the JSON file.
#    Replace the value of the `CONTAINER_NAME` environment variable in the workflow below with the name of the container
#    in the `containerDefinitions` section of the task definition.
#
# 4. Store an IAM user access key in GitHub Actions secrets named `AWS_ACCESS_KEY_ID` and `AWS_SECRET_ACCESS_KEY`.
#    See the documentation for each action used below for the recommended IAM policies for this IAM user,
#    and best practices on handling the access key credentials.

name: Deploy Github to AWS ECS

on:
  push:
    branches: [ "ecs" ]

env:
  AWS_REGION: us-east-2
  ECR_BE_REPO: ecr-express-docker-repo
  ECR_FE_REPO: ecr-react-docker-repo
  ECR_REPOSITORY: ecr-docker-repo
  ECS_SERVICE: MY_ECS_SERVICE                 # set this to your Amazon ECS service name
  ECS_CLUSTER: MY_ECS_CLUSTER                 # set this to your Amazon ECS cluster name
  ECS_TASK_DEFINITION: .aws/task-definition.json
  ECS_TASK_TEMLPATE: .aws/task-definition-template.json
  ECR_SERVER_CONTAINER: server_prod_c
  ECR_CLIENT_CONTAINER: client_prod_c
  ECR_SERVER_IMAGE: server_prod_i
  ECR_CLIENT_IMAGE: client_prod_i
  ECR_PROJECT_NAME: biz-card-prod

permissions:
  contents: read

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: production

    steps:
    - name: Checkout
      uses: actions/checkout@v3

    # Get IAM user from Github Secrets
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    # Login with IAM user
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    # Server upload to ECR
    # - name: Build, tag, and push backend image to Amazon ECR
    #   id: build-backend
    #   env:
    #     ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
    #     # IMAGE_TAG: ${{ github.sha }}
    #   run: |
    #     # docker build -t $ECR_REGISTRY/$ECR_BE_REPO:$IMAGE_TAG -f ./server/Dockerfile.prod
    #     # docker push $ECR_REGISTRY/$ECR_BE_REPO:$IMAGE_TAG
    #     # echo "image=$ECR_REGISTRY/$ECR_BE_REPO:$IMAGE_TAG" >> $GITHUB_OUTPUT
    #     docker build -t $ECR_BE_REPO ./server/Dockerfile.prod
    #     docker tag $ECR_BE_REPO:latest $ECR_REGISTRY/$ECR_BE_REPO:latest
    #     docker push $ECR_REGISTRY/$ECR_BE_REPO:latest
    
    # Client upload to ECR
    # - name: Build, tag, and push frontend image to Amazon ECR
    #   id: build-frontend
    #   env:
    #     ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
    #   run: |
    #     docker build -t $ECR_FE_REPO ./server/Dockerfile.prod
    #     docker tag $ECR_FE_REPO:latest $ECR_REGISTRY/$ECR_FE_REPO:latest
    #     docker push $ECR_REGISTRY/$ECR_FE_REPO:latest

    # Compose and upload to ECR
    - name: Build, tag, and push image to AWS ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        SERVER_CONTAINER: ${{ env.ECR_SERVER_CONTAINER }}
        CLIENT_CONTAINER: ${{ env.ECR_CLIENT_CONTAINER }}
        SERVER_IMAGE: ${{ env.ECR_SERVER_IMAGE }}
        CLIENT_IMAGE: ${{ env.ECR_CLIENT_IMAGE }}
      run: |
        docker compose -f compose.prod.aws.yml build
        docker tag $SERVER_IMAGE:latest $ECR_REGISTRY/$ECR_REPOSITORY:server_latest
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:server_latest
        echo "server_i=$ECR_REGISTRY/$ECR_REPOSITORY:server_latest" >> $GITHUB_OUTPUT
        docker tag $CLIENT_IMAGE:latest $ECR_REGISTRY/$ECR_REPOSITORY:client_latest
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:client_latest
        echo "client_i=$ECR_REGISTRY/$ECR_REPOSITORY:server_latest" >> $GITHUB_OUTPUT

    # Create task-defition based on service container
    - name: Render AWS ECS task definition for server container
      id: task-def-create
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: ${{ env.ECS_TASK_DEFINITION }}
        container-name: ${{ env.SERVER_CONTAINER }}
        image: ${{ steps.build-image.outputs.server_i }}

    # Update task-defition based on client container
    - name: Render AWS ECS task definition for client container
      id: task-def-update
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: ${{ steps.task-def-create.outputs.task-definition }}
        container-name: ${{ env.CLIENT_CONTAINER }}
        image: ${{ steps.build-image.outputs.client_i }}

    # Deploy final task definition to ECS
    - name: Deploy Amazon ECS task definition
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.task-def-update.outputs.task-definition }}
        service: ${{ env.ECS_SERVICE }}
        cluster: ${{ env.ECS_CLUSTER }}
        wait-for-service-stability: true
