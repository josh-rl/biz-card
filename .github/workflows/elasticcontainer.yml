name: Deploy Github to AWS ECS

on:
  push:
    branches: [ "ecs" ]

env:
  AWS_REGION: us-east-2
  # ECR_BE_REPO: ecr-express-docker-repo
  # ECR_FE_REPO: ecr-react-docker-repo
  ECR_REPOSITORY: ecr-docker-repo
  ECS_SERVICE: test-docker-service
  ECS_CLUSTER: test-docker-cluster
  ECS_TASK_DEFINITION: .aws/task-definition-client.json
  ECS_TASK_TEMLPATE: .aws/task-definition-template.json
  ECR_SERVER_CONTAINER: server_prod_c
  ECR_CLIENT_CONTAINER: client_prod_c
  ECR_SERVER_IMAGE: server_prod_i
  ECR_CLIENT_IMAGE: client_prod_i
  ECR_PROJECT_NAME: biz-card-prod

permissions:
  contents: read

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: production

    steps:
    - name: Checkout
      uses: actions/checkout@v3

    # Get IAM user from Github Secrets
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    # Login with IAM user
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    # # Server upload to ECR
    # - name: Build, tag, and push backend image to Amazon ECR
    #   id: build-backend
    #   env:
    #     ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
    #     # IMAGE_TAG: ${{ github.sha }}
    #   run: |
    #     docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:server_latest ./server
    #     docker push $ECR_REGISTRY/$ECR_REPOSITORY:server_latest
    #     echo "client_i=$ECR_REGISTRY/$ECR_REPOSITORY:server_latest" >> $GITHUB_OUTPUT
    
    # Client upload to ECR
    - name: Build, tag, and push frontend image to Amazon ECR
      id: build-frontend
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
      run: |
        docker build -f ./client/Dockerfile.prod -t $ECR_REGISTRY/$ECR_REPOSITORY:client_latest ./client
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:client_latest
        echo "client_i=$ECR_REGISTRY/$ECR_REPOSITORY:client_latest" >> $GITHUB_OUTPUT

    # Compose and upload to ECR
    # - name: Build, tag, and push image to AWS ECR
    #   id: build-image
    #   env:
    #     ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
    #     SERVER_IMAGE: ${{ env.ECR_SERVER_IMAGE }}
    #     SERVER_CONTAINER: ${{ env.ECR_SERVER_CONTAINER }}
    #     CLIENT_IMAGE: ${{ env.ECR_CLIENT_IMAGE }}
    #     CLIENT_CONTAINER: ${{ env.ECR_CLIENT_CONTAINER }}
    #   run: |
    #     docker compose -f compose.prod.aws.yml create
    #     docker tag $SERVER_IMAGE:latest $ECR_REGISTRY/$ECR_REPOSITORY:server_latest
    #     docker push $ECR_REGISTRY/$ECR_REPOSITORY:server_latest
    #     echo "server_i=$ECR_REGISTRY/$ECR_REPOSITORY:server_latest" >> $GITHUB_OUTPUT
    #     docker tag $CLIENT_IMAGE:latest $ECR_REGISTRY/$ECR_REPOSITORY:client_latest
    #     docker push $ECR_REGISTRY/$ECR_REPOSITORY:client_latest
    #     echo "client_i=$ECR_REGISTRY/$ECR_REPOSITORY:server_latest" >> $GITHUB_OUTPUT

    # # Create task-defition based on service container
    # - name: Render AWS ECS task definition for server container
    #   id: task-def-create
    #   # env:
    #   #   SERVER_C: ${{ env.ECR_SERVER_CONTAINER }}
    #   uses: aws-actions/amazon-ecs-render-task-definition@v1
    #   with:
    #     task-definition: ${{ env.ECS_TASK_DEFINITION }}
    #     container-name: ${{ env.ECR_SERVER_CONTAINER }}
    #     image: ${{ steps.build-image.outputs.server_i }}

    # # Update task-defition based on client container
    # - name: Render AWS ECS task definition for client container
    #   id: task-def-update
    #   # env:
    #   #   CLIENT_C: ${{ env.ECR_CLIENT_CONTAINER }}
    #   uses: aws-actions/amazon-ecs-render-task-definition@v1
    #   with:
    #     task-definition: ${{ steps.task-def-create.outputs.task-definition }}
    #     container-name: ${{ env.ECR_CLIENT_CONTAINER }}
    #     image: ${{ steps.build-image.outputs.client_i }}

    # Create task-defition based on service container
    - name: Render AWS ECS task definition for server container
      id: task-def-create
      # env:
      #   SERVER_C: ${{ env.ECR_SERVER_CONTAINER }}
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: ${{ env.ECS_TASK_DEFINITION }}
        container-name: ${{ env.ECR_CLIENT_CONTAINER }}
        image: ${{ steps.build-frontend.outputs.client_i }}

    # Deploy final task definition to ECS
    - name: Deploy Amazon ECS task definition
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.task-def-create.outputs.task-definition }}
        service: ${{ env.ECS_SERVICE }}
        cluster: ${{ env.ECS_CLUSTER }}
        wait-for-service-stability: true
